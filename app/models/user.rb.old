class User < ActiveRecord::Base
  include Mongoid::Document
  field :remember_token_expires_at, DateTime
  # t.string   "login"
  # t.string   "email"
  # t.string   "fullname"
  # t.string   "url"
  # t.string   "crypted_password",          :limit => 40
  # t.string   "salt",                      :limit => 40
  # t.datetime "created_at"
  # t.datetime "updated_at"
  # t.string   "remember_token"
  # t.datetime "remember_token_expires_at"
  # t.integer  "admin",                                   :default => 0
  # t.string   "identity_url"
  # t.integer  "approved_for_feed",                       :default => 0
  # t.datetime "last_checked_at"
	has_many :stars
	has_many :starred_items, :through => :stars, :source => :item
  # Virtual attribute for the unencrypted password
  attr_accessor :password

  validates_presence_of     :login #, :email
  validates_presence_of     :password,                   :if => :password_required?
  validates_presence_of     :password_confirmation,      :if => :password_required?
  validates_length_of       :password, :within => 4..40, :if => :password_required?
  validates_confirmation_of :password,                   :if => :password_required?
  validates_length_of       :login,    :within => 3..40
  #validates_length_of       :email,    :within => 3..100
  validates_uniqueness_of   :login, :case_sensitive => false
  validates_format_of       :login, :with => /^\w+$/
  validates_format_of       :url, :with => /^(|http\:\/\/.*)$/
  before_save :encrypt_password
  
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :password, :password_confirmation, :identity_url, :url, :fullname

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  def self.authenticate(login, password)
    u = find_by_login(login) # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  # Encrypts some data with the salt.
  def self.encrypt(password, salt)
    Digest::SHA1.hexdigest("--#{salt}--#{password}--")
  end

  # Encrypts the password with the user salt
  def encrypt(password)
    self.class.encrypt(password, salt)
  end

  def authenticated?(password)
    crypted_password == encrypt(password)
  end

  def remember_token?
    remember_token_expires_at && Time.now.utc < remember_token_expires_at 
  end

  # These create and unset the fields required for remembering users between browser closes
  def remember_me
    remember_me_for 52.weeks
  end

  def remember_me_for(time)
    remember_me_until time.from_now.utc
  end

  def remember_me_until(time)
    self.remember_token_expires_at = time
    self.remember_token            = encrypt("#{email}--#{remember_token_expires_at}")
    save(false)
  end

  def forget_me
    self.remember_token_expires_at = nil
    self.remember_token            = nil
    save(false)
  end

  protected
    # before filter 
    def encrypt_password
      return if password.blank?
      self.salt = Digest::SHA1.hexdigest("--#{Time.now.to_s}--#{login}--") if new_record?
      self.crypted_password = encrypt(password)
    end
      
    def password_required?
      crypted_password.blank? || !password.blank?
    end
    
    
end
